package ca.csf.mobile2.tp2.question

import android.annotation.SuppressLint
import android.support.v7.app.AppCompatActivity
import android.util.Log
import android.view.View
import android.widget.*
import ca.csf.mobile2.tp2.R
import ca.csf.mobile2.tp2.databinding.ActivityQuestionBinding
import org.androidannotations.annotations.*
import java.util.*

@SuppressLint("Registered") //Reason : Generated by Android Annotations
@DataBound
@EActivity(R.layout.activity_question)
class QuestionActivity : AppCompatActivity() {

    @Bean
    protected  lateinit var questionService : QuestionService

    @InstanceState
    protected lateinit var question : Question

    @InstanceState
    protected lateinit var viewModel : QuestionActivityViewModel

    protected fun onCreate(@BindingObject dataBinder : ActivityQuestionBinding) {
        if(!this::question.isInitialized)
        question = Question()
        if(!this::viewModel.isInitialized)
        viewModel = QuestionActivityViewModel(question)

        dataBinder.viewModel = viewModel

       if(question==viewModel.defaultQuestion)
        getRandomQuestion()
    }

    @AfterViews
    protected fun afterViews(){
    }

    @Click(R.id.retry_button)
    protected fun onRetryButtonClicked(){
        getRandomQuestion()
    }

    @Click(R.id.choice1_button)
    protected fun onChoice1ButtonClicked(){
        chooseQuestion1(question.id)
    }

    @Click(R.id.choice2_button)
    protected fun onChoice2ButtonClicked(){
        chooseQuestion2(question.id)
    }

    protected  fun getRandomQuestion(){
        viewModel.isLoading = true

        questionService.getRandomQuestion(
            this::onRandomQuestionFound,
            this::onConnectivityError,
            this::onServerError)
    }
    protected fun chooseQuestion1(id : UUID) {
        viewModel.userHasAnswered = true
        questionService.getQuestion1( id.toString(),this::onQuestion1Chose,
            this::onConnectivityError,
            this::onServerError)
    }

    protected fun chooseQuestion2(id: UUID) {
        viewModel.userHasAnswered = true
        questionService.getQuestion2(  id.toString(), this::onQuestion2Chose,
            this::onConnectivityError,
            this::onServerError)
    }
    @UiThread
    protected fun onRandomQuestionFound(question : Question){
        //TODO : ShowRandomQuestion
        this.question = question
        viewModel.question = question
        viewModel.isLoading = false
        viewModel.userHasAnswered = false

        Log.v("bob", "Id: " + question.id + " Text: " + question.text + " Choice 1 " + question.choice1 +
                " Choice 2 " + question.choice2 + " NbChoice1 " + question.nbChoice1 + " NbChoice2 " +
                question.nbChoice2)

    }
    @UiThread
    protected fun onQuestion1Chose(question: Question){
        //TODO : ShowQuestion1
        this.question = question
        viewModel.question = question
    }

    @UiThread
    protected fun onQuestion2Chose(question : Question){
        //TODO : ShowQuestion2
        this.question = question
        viewModel.question = question
    }

    @UiThread
    protected fun onConnectivityError(){
        //TODO : ShowErrorMessage
        viewModel.isLoading = false
        viewModel.currentErrorCode = QuestionActivityErrorCode.CONNECTIVITY
        viewModel.errorMessage = getString(R.string.text_error_internet)
        viewModel.activityState=ActivityState.ERROR_CONNECTIVITY
        Log.v("bob", "connectivity error")
    }

    @UiThread
    protected  fun onServerError(){
        //TODO : ShowErrorMessage
        viewModel.isLoading = false
        viewModel.currentErrorCode = QuestionActivityErrorCode.SERVER
        viewModel.errorMessage = getString(R.string.text_error_server)
        viewModel.activityState=ActivityState.ERROR_SERVER

        Log.v("bob", "server error")
    }
}
